{
  "student_roll": 1,
  "student_name": "sumit",
  "student_class": "fst",
  "student_contact": 88888,
  "student_address": "ggg",
  "student_marks": {
    "Math": 3,
    "Math2": 8,
    "Physic1": 6,
    "Physic2": 7
  }
}

{
  "student_roll": 2,
  "student_name": "harsh",
  "student_class": "sec",
  "student_contact": 88889,
  "student_address": "hhh",
  "student_marks": {
    "Math": 77,
    "Math2": 89,
    "Physic1": 96,
    "Physic2": 71
  }
}


{
  "student_roll": 3,
  "student_name": "ansh",
  "student_class": "third",
  "student_contact": 88890,
  "student_address": "iii",
  "student_marks": {
    "Math": 77,
    "Math2": 29,
    "Physic1": 36,
    "Physic2": 61
  }
}

{
  "subject_id": 1,
  "subject_name": "physic",
  "subject_status": true,
  "subject_description": "string",
  "min_pass_marks": 0
}






















from fastapi import FastAPI
from pydantic import BaseModel
from typing import TypeVar, Generic, Optional, List

app = FastAPI(title="Student CRUD API")


# ---------- MODELS ----------

class StudentMarks(BaseModel):
    Math: int
    Math2: int
    Physic1: int
    Physic2: int


class StudentData(BaseModel):
    student_roll: int
    student_name: str
    student_class: str
    student_contact: int
    student_address: str
    student_marks: StudentMarks  # Nested marks model


T = TypeVar("T")


class ApiResponseModel(BaseModel, Generic[T]):
    message: str
    data: Optional[T] = None
    status: bool


# ---------- IN-MEMORY DATA STORE ----------
students: List[StudentData] = []


# ---------- HELPER FUNCTION ----------
def check_if_roll_no_exists(roll_no: int):
    for i, student in enumerate(students):
        if student.student_roll == roll_no:
            return True, i
    return False, None


# ---------- ROUTES ----------

@app.get("/")
def index():
    return {"message": "Hello World! FastAPI Student CRUD is running ðŸš€"}


@app.post("/students", response_model=ApiResponseModel[List[StudentData]])
def create_student(student_data: StudentData):
    try:
        exists, _ = check_if_roll_no_exists(student_data.student_roll)
        if exists:
            return ApiResponseModel(message="Record already exists", data=None, status=False)

        students.append(student_data)
        return ApiResponseModel(message="Created successfully", data=[student_data], status=True)
    except Exception as error:
        return ApiResponseModel(message=str(error), data=None, status=False)


@app.get("/students", response_model=ApiResponseModel[List[StudentData]])
def fetch_students():
    try:
        if not students:
            return ApiResponseModel(message="No data found", data=[], status=False)
        return ApiResponseModel(message="Data found", data=students, status=True)
    except Exception as error:
        return ApiResponseModel(message=str(error), data=None, status=False)


@app.get("/students/{rid}", response_model=ApiResponseModel[List[StudentData]])
def fetch_student_by_roll_no(rid: int):
    try:
        exists, i = check_if_roll_no_exists(rid)
        if not exists:
            return ApiResponseModel(message="Data not found", data=None, status=False)
        return ApiResponseModel(message="Data found", data=[students[i]], status=True)
    except Exception as error:
        return ApiResponseModel(message=str(error), data=None, status=False)


@app.put("/students/{rid}", response_model=ApiResponseModel[List[StudentData]])
def update_student(rid: int, student_data: StudentData):
    try:
        exists, i = check_if_roll_no_exists(rid)
        if not exists:
            return ApiResponseModel(message="Data not found", data=None, status=False)

        if rid != student_data.student_roll:
            return ApiResponseModel(message="Roll number mismatch", data=None, status=False)

        students[i] = student_data
        return ApiResponseModel(message="Data updated successfully", data=[students[i]], status=True)
    except Exception as error:
        return ApiResponseModel(message=str(error), data=None, status=False)


@app.delete("/students/{rid}", response_model=ApiResponseModel[List[StudentData]])
def delete_student(rid: int):
    try:
        exists, i = check_if_roll_no_exists(rid)
        if not exists:
            return ApiResponseModel(message="Data not found", data=None, status=False)

        deleted_student = students.pop(i)
        return ApiResponseModel(message="Data deleted successfully", data=[deleted_student], status=True)
    except Exception as error:
        return ApiResponseModel(message=str(error), data=None, status=False)
